// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findPlayersByNameAndRegion = `-- name: FindPlayersByNameAndRegion :many
SELECT player_id, name
FROM players
WHERE name ILIKE $1 || '%' AND region = $2
`

type FindPlayersByNameAndRegionParams struct {
	Name   pgtype.Text `json:"name"`
	Region RegionEnum  `json:"region"`
}

type FindPlayersByNameAndRegionRow struct {
	PlayerID string `json:"player_id"`
	Name     string `json:"name"`
}

func (q *Queries) FindPlayersByNameAndRegion(ctx context.Context, arg FindPlayersByNameAndRegionParams) ([]FindPlayersByNameAndRegionRow, error) {
	rows, err := q.db.Query(ctx, findPlayersByNameAndRegion, arg.Name, arg.Region)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindPlayersByNameAndRegionRow{}
	for rows.Next() {
		var i FindPlayersByNameAndRegionRow
		if err := rows.Scan(&i.PlayerID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountsOfEntities = `-- name: GetCountsOfEntities :one
SELECT
  (SELECT COUNT(*) FROM players) AS total_players,
  (SELECT COUNT(*) FROM guilds) AS total_guilds,
  (SELECT COUNT(*) FROM alliances) AS total_alliances
`

type GetCountsOfEntitiesRow struct {
	TotalPlayers   int64 `json:"total_players"`
	TotalGuilds    int64 `json:"total_guilds"`
	TotalAlliances int64 `json:"total_alliances"`
}

func (q *Queries) GetCountsOfEntities(ctx context.Context) (GetCountsOfEntitiesRow, error) {
	row := q.db.QueryRow(ctx, getCountsOfEntities)
	var i GetCountsOfEntitiesRow
	err := row.Scan(&i.TotalPlayers, &i.TotalGuilds, &i.TotalAlliances)
	return i, err
}
