// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
	"time"
)

const getAllianceHistory = `-- name: GetAllianceHistory :many
SELECT
    g.guild_id,
	g.name,
	gam.first_seen,
	gam.last_seen
FROM
	guild_alliance_memberships gam
JOIN
	guilds g ON
	gam.guild_id = g.guild_id
	AND gam.region = g.region
WHERE
	gam.alliance_id = $1
	AND gam.region = $2
ORDER BY
	gam.first_seen DESC
LIMIT $3 OFFSET $4
`

type GetAllianceHistoryParams struct {
	AllianceID string `json:"alliance_id"`
	Region     string `json:"region"`
	Limit      int32  `json:"limit"`
	Offset     int32  `json:"offset"`
}

type GetAllianceHistoryRow struct {
	GuildID   string    `json:"guild_id"`
	Name      string    `json:"name"`
	FirstSeen time.Time `json:"first_seen"`
	LastSeen  time.Time `json:"last_seen"`
}

func (q *Queries) GetAllianceHistory(ctx context.Context, arg GetAllianceHistoryParams) ([]GetAllianceHistoryRow, error) {
	rows, err := q.db.Query(ctx, getAllianceHistory,
		arg.AllianceID,
		arg.Region,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllianceHistoryRow{}
	for rows.Next() {
		var i GetAllianceHistoryRow
		if err := rows.Scan(
			&i.GuildID,
			&i.Name,
			&i.FirstSeen,
			&i.LastSeen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountsOfEntities = `-- name: GetCountsOfEntities :one
SELECT
  (SELECT COUNT(*) FROM players) AS players,
  (SELECT COUNT(*) FROM guilds) AS guilds,
  (SELECT COUNT(*) FROM alliances) AS alliances
`

type GetCountsOfEntitiesRow struct {
	Players   int64 `json:"players"`
	Guilds    int64 `json:"guilds"`
	Alliances int64 `json:"alliances"`
}

func (q *Queries) GetCountsOfEntities(ctx context.Context) (GetCountsOfEntitiesRow, error) {
	row := q.db.QueryRow(ctx, getCountsOfEntities)
	var i GetCountsOfEntitiesRow
	err := row.Scan(&i.Players, &i.Guilds, &i.Alliances)
	return i, err
}

const getGuildAllianceHistory = `-- name: GetGuildAllianceHistory :many
SELECT
    a.alliance_id,
	a.name,
	a.tag,
	gam.first_seen,
	gam.last_seen
FROM
	guild_alliance_memberships gam
JOIN
	alliances a ON
	gam.alliance_id = a.alliance_id
	AND gam.region = a.region
WHERE
	gam.guild_id = $1
	AND gam.region = $2
ORDER BY
	gam.first_seen DESC
LIMIT $3 OFFSET $4
`

type GetGuildAllianceHistoryParams struct {
	GuildID string `json:"guild_id"`
	Region  string `json:"region"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetGuildAllianceHistoryRow struct {
	AllianceID string    `json:"alliance_id"`
	Name       *string   `json:"name"`
	Tag        string    `json:"tag"`
	FirstSeen  time.Time `json:"first_seen"`
	LastSeen   time.Time `json:"last_seen"`
}

func (q *Queries) GetGuildAllianceHistory(ctx context.Context, arg GetGuildAllianceHistoryParams) ([]GetGuildAllianceHistoryRow, error) {
	rows, err := q.db.Query(ctx, getGuildAllianceHistory,
		arg.GuildID,
		arg.Region,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGuildAllianceHistoryRow{}
	for rows.Next() {
		var i GetGuildAllianceHistoryRow
		if err := rows.Scan(
			&i.AllianceID,
			&i.Name,
			&i.Tag,
			&i.FirstSeen,
			&i.LastSeen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGuildPlayerHistory = `-- name: GetGuildPlayerHistory :many
SELECT
	p.player_id,
	p.name,
	pgm.first_seen,
	pgm.last_seen
FROM
	player_guild_memberships pgm
JOIN players p ON
	pgm.player_id = p.player_id
	AND pgm.region = p.region
WHERE 
	pgm.guild_id = $1
	AND pgm.region = $2
ORDER BY
	pgm.first_seen DESC
LIMIT $3 OFFSET $4
`

type GetGuildPlayerHistoryParams struct {
	GuildID string `json:"guild_id"`
	Region  string `json:"region"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetGuildPlayerHistoryRow struct {
	PlayerID  string    `json:"player_id"`
	Name      string    `json:"name"`
	FirstSeen time.Time `json:"first_seen"`
	LastSeen  time.Time `json:"last_seen"`
}

func (q *Queries) GetGuildPlayerHistory(ctx context.Context, arg GetGuildPlayerHistoryParams) ([]GetGuildPlayerHistoryRow, error) {
	rows, err := q.db.Query(ctx, getGuildPlayerHistory,
		arg.GuildID,
		arg.Region,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGuildPlayerHistoryRow{}
	for rows.Next() {
		var i GetGuildPlayerHistoryRow
		if err := rows.Scan(
			&i.PlayerID,
			&i.Name,
			&i.FirstSeen,
			&i.LastSeen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayerHistory = `-- name: GetPlayerHistory :many
SELECT
	g.name,
	g.guild_id,
	pgm.first_seen,
	pgm.last_seen,
	COALESCE(
	(
	SELECT
		array_to_json(array_agg(row_to_json(a)))
	FROM
		(
		SELECT
			a.alliance_id,
			a.name,
			a.tag,
			GREATEST(pgm.first_seen, gam.first_seen) AS first_seen,
			LEAST(pgm.last_seen, gam.last_seen) AS last_seen
		FROM
			guild_alliance_memberships gam
		JOIN 
            alliances a ON
			gam.alliance_id = a.alliance_id
			AND gam.region = a.region
		WHERE
			gam.guild_id = g.guild_id
			AND gam.region = g.region
			AND gam.first_seen <= pgm.last_seen
			AND gam.last_seen >= pgm.first_seen
		ORDER BY
			gam.first_seen DESC
		) a
	),
	'[]'::JSON
	) AS alliances
FROM
	player_guild_memberships pgm
JOIN
	guilds g ON
	pgm.guild_id = g.guild_id
	AND pgm.region = g.region
WHERE 
	pgm.player_id = $1
	AND pgm.region = $2
ORDER BY 
	pgm.first_seen DESC
`

type GetPlayerHistoryParams struct {
	PlayerID string `json:"player_id"`
	Region   string `json:"region"`
}

type GetPlayerHistoryRow struct {
	Name      string      `json:"name"`
	GuildID   string      `json:"guild_id"`
	FirstSeen time.Time   `json:"first_seen"`
	LastSeen  time.Time   `json:"last_seen"`
	Alliances interface{} `json:"alliances"`
}

func (q *Queries) GetPlayerHistory(ctx context.Context, arg GetPlayerHistoryParams) ([]GetPlayerHistoryRow, error) {
	rows, err := q.db.Query(ctx, getPlayerHistory, arg.PlayerID, arg.Region)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPlayerHistoryRow{}
	for rows.Next() {
		var i GetPlayerHistoryRow
		if err := rows.Scan(
			&i.Name,
			&i.GuildID,
			&i.FirstSeen,
			&i.LastSeen,
			&i.Alliances,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
